<?php

/*
 *  Abstract class to implement validators
 * 
 */
require_once('ApiException.php');
require_once('ApiHttpErrors.php');

class Validator 
{
    // Container of errors generated by the Validator
    private $_errors = array();
        
    // Validators container
    private $_validators = array();                
    
    public function addValidator(Validator $validator)
    {
        $this->_validators[] = $validator;
        return $this;
    }
    
    public function getValidator($index)
    {
        return $this->_validators[$index];
    }
    
    public function validate($value, $value_name)
    {
        foreach($this->_validators as $validator) 
        {
            if ($validator->validate($value) === FALSE) 
            {     
                throw new ApiException(ApiHttpErrors::invalidParameter("Parameter ". $value_name . " is invalid: ". $validator->getError()));
            }
        }        
    }
    
    // Add an error message 
    protected function setError($msg)
    {
        Logger::error($msg);
        $this->_errors[] = $msg;        
    }
    
    // Pops the last error message 
    protected function getError()
    {
        return array_pop($this->_errors);    
    }
}

?>
